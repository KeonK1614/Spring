/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.25
 * Generated at: 2024-07-18 07:10:58 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.NaverLogin;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;

public final class login_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("    <meta http-equiv=\"Content-Type\" content=\"text/html; charset=UTF-8\">\n");
      out.write("	<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\n");
      out.write("	<title>NaverLoginSDK Test with BootStrap</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("\n");
      out.write("<a id=\"gnbLogin\" href=\"#\">Login</a>\n");
      out.write("\n");
      out.write("<div id=\"naverIdLogin\">\n");
      out.write("</div>\n");
      out.write("\n");
      out.write("\n");
      out.write("	<!-- /container -->\n");
      out.write("	<script src=\"https://code.jquery.com/jquery-1.12.1.min.js\"></script>\n");
      out.write("\n");
      out.write("	<!-- (2) LoginWithNaverId Javscript SDK -->\n");
      out.write("	<script src=\"naveridlogin_js_sdk_2.0.2.js\"></script>\n");
      out.write("\n");
      out.write("	<!-- (3) LoginWithNaverId Javscript 설정 정보 및 초기화 -->\n");
      out.write("	<script>\n");
      out.write("		\n");
      out.write("		var naverLogin = new naver.LoginWithNaverId(\n");
      out.write("			{\n");
      out.write("				clientId: \"T5Um4_3KHHPOoki5G4Q1\",\n");
      out.write("				callbackUrl: \"http://localhost:8081/MustHaveJSP/NaverLogin/login.jsp\",\n");
      out.write("				isPopup: false,\n");
      out.write("				loginButton: {color: \"green\", type: 3, height: 60}\n");
      out.write("			}\n");
      out.write("		);\n");
      out.write("		/* (4) 네아로 로그인 정보를 초기화하기 위하여 init을 호출 */\n");
      out.write("		naverLogin.init();\n");
      out.write("		\n");
      out.write("		/* (4-1) 임의의 링크를 설정해줄 필요가 있는 경우 */\n");
      out.write("		$(\"#gnbLogin\").attr(\"href\", naverLogin.generateAuthorizeUrl());\n");
      out.write("\n");
      out.write("		/* (5) 현재 로그인 상태를 확인 */\n");
      out.write("		window.addEventListener('load', function () {\n");
      out.write("			naverLogin.getLoginStatus(function (status) {\n");
      out.write("				if (status) {\n");
      out.write("					/* (6) 로그인 상태가 \"true\" 인 경우 로그인 버튼을 없애고\n");
      out.write("					   사용자 정보를 출력합니다. */\n");
      out.write("					setLoginStatus();\n");
      out.write("				}\n");
      out.write("			});\n");
      out.write("		});\n");
      out.write("\n");
      out.write("		/* (6) 로그인 상태가 \"true\" 인 경우 로그인 버튼을 없애고\n");
      out.write("		   사용자 정보를 출력합니다. */\n");
      out.write("		function setLoginStatus() {\n");
      out.write("			console.log(naverLogin.user);\n");
      out.write("			var uid = naverLogin.user.getId();\n");
      out.write("			var profileImage = naverLogin.user.getProfileImage();\n");
      out.write("			var uName = naverLogin.user.getName();\n");
      out.write("			var nickName = naverLogin.user.getNickName();\n");
      out.write("			var eMail = naverLogin.user.getEmail();\n");
      out.write("\n");
      out.write("			$(\"#naverIdLogin\").html(\n");
      out.write("					'<br><br><img src=\"' + profileImage + \n");
      out.write("					'\" height=50 /> <p>' + uid + \"-\" + uName + '님 반갑습니다.</p>');\n");
      out.write("\n");
      out.write("			$(\"#gnbLogin\").html(\"Logout\");\n");
      out.write("			$(\"#gnbLogin\").attr(\"href\", \"#\");\n");
      out.write("			/* (7) 로그아웃 버튼을 설정하고 동작을 정의합니다. */\n");
      out.write("			$(\"#gnbLogin\").click(function () {\n");
      out.write("				naverLogin.logout();\n");
      out.write("				window.location.replace(\"login.jsp\");\n");
      out.write("			});\n");
      out.write("		}\n");
      out.write("	</script>\n");
      out.write("\n");
      out.write("\n");
      out.write("</body>\n");
      out.write("</html>\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
