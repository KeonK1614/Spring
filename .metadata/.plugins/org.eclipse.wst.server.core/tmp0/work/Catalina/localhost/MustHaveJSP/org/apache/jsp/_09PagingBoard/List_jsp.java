/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.1.25
 * Generated at: 2024-07-12 01:25:59 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp._09PagingBoard;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import model1.board.BoardDTO;
import java.util.List;
import java.util.Map;
import java.util.HashMap;
import model1.board.BoardDAO;
import utils.BoardPage;

public final class List_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports,
                 org.apache.jasper.runtime.JspSourceDirectives {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.LinkedHashSet<>(4);
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.LinkedHashSet<>(8);
    _jspx_imports_classes.add("java.util.List");
    _jspx_imports_classes.add("model1.board.BoardDTO");
    _jspx_imports_classes.add("java.util.Map");
    _jspx_imports_classes.add("java.util.HashMap");
    _jspx_imports_classes.add("model1.board.BoardDAO");
    _jspx_imports_classes.add("utils.BoardPage");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public boolean getErrorOnELNotFound() {
    return false;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");
      out.write("\n");

// DB연결 및 CRUD작업을 위한 DAO객체를 생성한다.
BoardDAO dao = new BoardDAO(application);
/*
	검색어가 있는 경우 클라이언트가 선택한 필드명과 검색어를 저장할
	Map컬렉션을 생성한다.
*/
Map<String, Object> param = new HashMap<String, Object>();
/*
	검색폼에서 입력한 검색어와 필드명을 파라미터로 받아온다.
	해당 <form>의 전송방식은 get, action속성은 없는 상태이므로
	현재 페이지로 폼값이 전송된다.
*/
String searchField = request.getParameter("searchField");
String searchWord = request.getParameter("searchWord");
// 사용자가 입력한 검색어가 있다면...
if (searchWord != null) {
	/* Map컬렉션에 컬럼명과 검색어를 추가한다. */
   param.put("searchField", searchField);
   param.put("searchWord", searchWord);
}
// Map콜렉션을 인수로 게시물의 갯수를 카운트한다.
int totalCount = dao.selectCount(param);

int pageSize = Integer.parseInt(application.getInitParameter("POSTS_PER_PAGE"));
int blockPage = Integer.parseInt(application.getInitParameter("PAGES_PER_BLOCK"));
int totalPage = (int)Math.ceil((double)totalCount / pageSize);

int pageNum=1;
String pageTemp = request.getParameter("pageNum");

if (pageTemp != null && !pageTemp.equals(""))
	pageNum = Integer.parseInt(pageTemp);

int start = (pageNum -1) * pageSize + 1;
int end = pageNum * pageSize;
param.put("start", start);
param.put("end", end);
// 페이지 처리 end*

// 목록에 출력할 게시물을 추출하여 반환받는다.
List<BoardDTO> boardLists = dao.selectListPage(param);
//자원해제
dao.close(); 

      out.write("\n");
      out.write("\n");
      out.write("<!DOCTYPE html>\n");
      out.write("<html>\n");
      out.write("<head>\n");
      out.write("<meta charset=\"UTF-8\">\n");
      out.write("<title>회원제 게시판</title>\n");
      out.write("</head>\n");
      out.write("<body>\n");
      out.write("    ");
      org.apache.jasper.runtime.JspRuntimeLibrary.include(request, response, "../Common/Link.jsp", out, false);
      out.write("  \n");
      out.write("\n");
      out.write("    <h2>목록 보기(List) - 현재 페이지 : ");
      out.print( pageNum );
      out.write(" (전체 : ");
      out.print( totalPage );
      out.write(")</h2>\n");
      out.write("    <form method=\"get\">  \n");
      out.write("    <table border=\"1\" width=\"90%\">\n");
      out.write("    <tr>\n");
      out.write("        <td align=\"center\">\n");
      out.write("            <select name=\"searchField\"> \n");
      out.write("                <option value=\"title\">제목</option> \n");
      out.write("                <option value=\"content\">내용</option>\n");
      out.write("            </select>\n");
      out.write("            <input type=\"text\" name=\"searchWord\" />\n");
      out.write("            <input type=\"submit\" value=\"검색하기\" />\n");
      out.write("        </td>\n");
      out.write("    </tr>   \n");
      out.write("    </table>\n");
      out.write("    </form>\n");
      out.write("    <table border=\"1\" width=\"90%\">\n");
      out.write("        <tr>\n");
      out.write("            <th width=\"10%\">번호</th>\n");
      out.write("            <th width=\"50%\">제목</th>\n");
      out.write("            <th width=\"15%\">작성자</th>\n");
      out.write("            <th width=\"10%\">조회수</th>\n");
      out.write("            <th width=\"15%\">작성일</th>\n");
      out.write("        </tr>\n");

if (boardLists.isEmpty()) {

      out.write("\n");
      out.write("        <tr>\n");
      out.write("            <td colspan=\"5\" align=\"center\">\n");
      out.write("                등록된 게시물이 없습니다^^*\n");
      out.write("            </td>\n");
      out.write("        </tr>\n");

}
else {
    int virtualNum = 0; 
    int countNum = 0;
    for (BoardDTO dto : boardLists)
    {
        //virtualNum = totalCount--;  
        virtualNum = totalCount - (((pageNum -1) * pageSize) + countNum++);

      out.write("\n");
      out.write("        <tr align=\"center\">\n");
      out.write("            <td>");
      out.print( virtualNum );
      out.write("</td>  \n");
      out.write("            <td align=\"left\"> \n");
      out.write("                <a href=\"View.jsp?num=");
      out.print( dto.getNum() );
      out.write('"');
      out.write('>');
      out.print( dto.getTitle() );
      out.write("</a> \n");
      out.write("            </td>\n");
      out.write("            <td align=\"center\">");
      out.print( dto.getId() );
      out.write("</td>           \n");
      out.write("            <td align=\"center\">");
      out.print( dto.getVisitcount() );
      out.write("</td>   \n");
      out.write("            <td align=\"center\">");
      out.print( dto.getPostdate() );
      out.write("</td>    \n");
      out.write("        </tr>\n");

    }
}

      out.write("\n");
      out.write("    </table>\n");
      out.write("   \n");
      out.write("    <table border=\"1\" width=\"90%\">\n");
      out.write("        <tr align=\"center\">\n");
      out.write("        	<td>\n");
      out.write("        		");
      out.print( BoardPage.pagingStr(totalCount, pageSize, blockPage,
        				pageNum, request.getRequestURI()) );
      out.write("\n");
      out.write("        	</td>\n");
      out.write("        	<!-- 글쓰기 버튼 -->\n");
      out.write("            <td><button type=\"button\" onclick=\"location.href='Write.jsp';\">글쓰기\n");
      out.write("                </button></td>\n");
      out.write("        </tr>\n");
      out.write("    </table>\n");
      out.write("</body>\n");
      out.write("\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
